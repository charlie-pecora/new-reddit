// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: posts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPosts = `-- name: CreatePosts :one
insert into posts (user_id, title, content) values (
  (select id from users where sub = $1),
  $2,
  $3
)
returning id, user_id, title, content, created
`

type CreatePostsParams struct {
	Sub     string
	Title   string
	Content pgtype.Text
}

func (q *Queries) CreatePosts(ctx context.Context, arg CreatePostsParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPosts, arg.Sub, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Created,
	)
	return i, err
}

const getPostDetail = `-- name: GetPostDetail :one
select
  p.id,
  p.user_id,
  u.name,
  p.title,
  p.content,
  p.created
from posts p
join users u on u.id = p.user_id
where p.id = $1
`

type GetPostDetailRow struct {
	ID      int64
	UserID  pgtype.Int8
	Name    string
	Title   string
	Content pgtype.Text
	Created pgtype.Timestamptz
}

func (q *Queries) GetPostDetail(ctx context.Context, id int64) (GetPostDetailRow, error) {
	row := q.db.QueryRow(ctx, getPostDetail, id)
	var i GetPostDetailRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Title,
		&i.Content,
		&i.Created,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
select
  p.id,
  p.user_id,
  u.name,
  p.title,
  p.created
from posts p
join users u on u.id = p.user_id
order by created desc
limit 100
`

type ListPostsRow struct {
	ID      int64
	UserID  pgtype.Int8
	Name    string
	Title   string
	Created pgtype.Timestamptz
}

func (q *Queries) ListPosts(ctx context.Context) ([]ListPostsRow, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsRow
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Title,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
